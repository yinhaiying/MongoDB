1 为什么需要数据库？

我们的数据可以通过变量来保存，但是变量位于程序中。程序都是在内存中运行的，
(内存的特点就是其中的数据一旦断电就完全消失)
一旦程序运行结束或者计算机断电，程序运行中的数据都会丢失。
所以我们需要将一些程序运行的数据持久化到硬盘之中，以确保数据的安全性。
(硬盘中的数据会持久保存，除非磁盘坏掉了。)
保存到硬盘之中，那么为什么不保存到文件中，这是因为读取文件非常慢，性能不好。

而数据库就是数据持久化的最佳选择。

说白了，数据库就是存储数据的仓库。


2  数据库的分类

  --关系型数据库(RDBMS)
  全都是基于表
    --MySQL、Orable


  --非关系型数据库(No SQL结构化查询语言)
    --MongoDB、Redis
    --键值对数据库
    --文档数据库MongoDB

3 MongoDB简介
  MongDB是为快速开发互联网应用而设计的数据库系统
  MongDB的设计目标是极简、灵活、作为应用栈的一部分
  MongDB的数据模型是面向文档的，所谓文档是一种类似于json的结构，简单理解MongDB这个数据库
  中存在的是各种各样的json。(BSON:二进制json)

4 安装mongodb
  --安装
  --配置环境变量
  在环境变量的path中添加bin目录
    C:\Program Files\MongoDB\Server\4.0\bin
    在命令行中输入mongod验证是否成功
  --在c盘根目录创建一个文件夹data
    在data中创建一个文件夹db。db就是用来保存数据库的数据
  --打开命令行窗口
    输入mongod启动mongodb服务器。保持命令行端口不动
  --再打开一个命令窗口
    输入mongo(注意不是mongod),连接mongodb,出现> 表示服务器启动成功

5 数据库(database)
  -数据库的服务器
    -服务器用来保存数据
    -mongod用来启动服务器
  -数据库的客户端
    -客户端用来操作服务器，对数据进行增删改查的操作
    -mongo用来启动客户端

(非必须的，为了方便)
6 将mongdb设置为系统服务，可以自动在后台启动，不需要每次都手动启动
  1.在盘根目录创建data
    --在data中创建db和log两个文件
  2.创建一个配置文件
    在bin所在的目录下
      C:\Program Files\MongoDB\Server\4.0
  3.以管理员身份打开命令行窗口
  4.执行如下的命令

7 三个概念
mongobd服务器可以多个数据库
  1.数据库
    -数据库是一个仓库，在仓库中可以存放集合
    一个数据库可以存放多个集合
  2.集合
    -集合类似于数组，在集合中可以存放文档
    一个集合可以有多个文档
  3.文档
    -文档是数据库中的最小单位，我们存储和操作的内容都是文档
  在mongodb中，数据库和集合都不需要我们手动创建
    当我们创建文档时，如果endangered所在的集合和数据库不存在，会自动创建数据库

8 基本指令

show dbs  显示当前所有的数据库

use + 数据库名  进入到指定的数据库

db :表示当前所在的数据库

show collections:显示数据库中所有的集合


9 数据库中的基本操作(CRUD增删改查)
  --向数据库中插入文档
     db.<collection>.insert():
        向集合中插入一个或者多个文档(数组)
      db.collection.insertOne()
        --插入一个文档对象
      db.collecton.insertMany();
        --插入多个文档对象  必须传数组
  --查询文档
    db.<collection>.find()
       --find()用来查询集合中所有复合条件的文档。如果不传参数默认是所有
       --find()可以接收一个对象作为条件，{属性：值}查询属性是指定值的文档
         db.stus.find({age:24});查找年龄为24的文档
       --find()返回的是一个数组，是所有复合条件的文档
    db.collection.find().count():统计复合条件的数量
    db.<collections>.findOne()
       --用来查询集合中符合条件的第一个文档
       --findOne()返回的就是一个文档

    PS:MondoDB支持直接通过内嵌文档的属性进行查询，如果要查询内嵌文档，则可以通过.的形式来匹配
    但是如果要通过内嵌文档来查询，此时属性名必须添加引号：
    db.users.find({"hobby.movie":'西游记'})

  --修改
    db.<collections>.update(查询条件，新对象)
      --update默认情况下会使用新对象替换旧对象
      --如果需要修改指定的属性，而不是替换需要使用修改操作符来完成修改
        $set 设置指定的属性
        db.stus.update({name:'js'},{$set:{age:1000}})
        $unset 删除文档的指定属性
        db.stus.update({name:'js',{$set:{age:1000}}})
        删除js文件的age属性
      --update默认只会修改一个。通过设置参数可以修改多个

    db.<collections>.updateOne()
      --只修改一个
    db.<collections>.updateMany()
      --修改多个参数
      db.stus.updateMany({name:'js'},{$set:{age:1000}})
    db.<collections>.replaceOne()
      --替换文档
  --删除
    db.<collection>.remove(查询条件,{})
      --根据条件删除文档，传递条件的方式和find相同
      --默认删除复合条件的所有文档
        {justOne:true}
      --如果只传递一个空的对象{},则会删除所有文档
      db.stus.drop()删除集合性能更好
      db.dropDataBase() 删除数据库

    db.<collection>.deleteOne()
    db.<collection>.deleteMany()

  ps:
    --一般数据库中的数据都不会删除，所以删除的方法很少调用
    --一般会在数据中添加一个字段，来表示数据是否会被删除
    isDel:0  表示不删除
   {name:'红楼梦',age:1000,isDel:0},
   {name:'西游记',age:1000,isDel:0},
   {name:'水浒传',age:1000,isDel:0}
   查询时添加条件,过滤掉删除的元素
   db.stus.find({isDel:0});


10. 操作符：

  $push:用于向数组中添加一个新的元素
  $addToSet:向数组中添加一个新元素，如果数组中已经存在了该元素，则不会添加


11.文档间的关系
  一对一(one to one)
    --在MongoDB中通过内嵌文档的形式体现一对一的关系
    --一对一关系的实现，通常是将其中一个作为另外一个的属性
    db.wifeAndHusband.insert([
      {
        name:'黄蓉',
        husband:{
          name:'郭靖'
        }
      }
    ])

  一对多(one to many)


  多对多(many to many)


